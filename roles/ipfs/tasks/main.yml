---
- name: Create IPFS namespace
  kubernetes.core.k8s:
    name: storage
    api_version: v1
    kind: Namespace
    state: present
  delegate_to: "{{ groups['k3s_master'][0] }}"
  run_once: true

- name: Create IPFS ConfigMap
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: ipfs-config
        namespace: storage
      data:
        configure-ipfs.sh: |
          #!/bin/sh
          set -e
          set -x
          user=ipfs
          repo="$IPFS_PATH"
          if [ ! -f "$repo/config" ]; then
            ipfs init --profile=server
          fi
          ipfs config Addresses.API /ip4/0.0.0.0/tcp/5001
          ipfs config Addresses.Gateway /ip4/0.0.0.0/tcp/8080
          ipfs config --json API.HTTPHeaders.Access-Control-Allow-Origin '["*"]'
          ipfs config --json API.HTTPHeaders.Access-Control-Allow-Methods '["PUT", "POST", "GET"]'
          ipfs config --json Swarm.EnableAutoRelay true
          ipfs config --json Swarm.EnableRelayHop true
          ipfs config --json Swarm.ConnMgr.LowWater 200
          ipfs config --json Swarm.ConnMgr.HighWater 300
          ipfs config Datastore.StorageMax "20GB"
          chown -R "$user" "$repo"
  delegate_to: "{{ groups['k3s_master'][0] }}"
  run_once: true

- name: Deploy IPFS DaemonSet
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: apps/v1
      kind: DaemonSet
      metadata:
        name: ipfs
        namespace: storage
      spec:
        selector:
          matchLabels:
            app: ipfs
        template:
          metadata:
            labels:
              app: ipfs
          spec:
            nodeSelector:
              node-role.kubernetes.io/worker: "true"
            initContainers:
              - name: configure-ipfs
                image: ipfs/go-ipfs:v{{ ipfs_version }}
                command: ["sh", "/custom/configure-ipfs.sh"]
                volumeMounts:
                  - name: ipfs-storage
                    mountPath: /data/ipfs
                  - name: configure-script
                    mountPath: /custom
                env:
                  - name: IPFS_PATH
                    value: /data/ipfs
            containers:
              - name: ipfs
                image: ipfs/go-ipfs:v{{ ipfs_version }}
                command: ["ipfs", "daemon", "--migrate=true", "--routing=dhtclient"]
                ports:
                  - containerPort: 4001
                    name: swarm
                  - containerPort: 5001
                    name: api
                  - containerPort: 8080
                    name: gateway
                volumeMounts:
                  - name: ipfs-storage
                    mountPath: /data/ipfs
                env:
                  - name: IPFS_PATH
                    value: /data/ipfs
                resources:
                  requests:
                    cpu: 500m
                    memory: 1Gi
                  limits:
                    cpu: 1000m
                    memory: 1.5Gi
                livenessProbe:
                  httpGet:
                    path: /api/v0/id
                    port: api
                  initialDelaySeconds: 30
                  periodSeconds: 10
                readinessProbe:
                  httpGet:
                    path: /api/v0/id
                    port: api
                  initialDelaySeconds: 5
                  periodSeconds: 3
            volumes:
              - name: configure-script
                configMap:
                  name: ipfs-config
                  defaultMode: "0755"
              - name: ipfs-storage
                hostPath:
                  path: /var/lib/ipfs
                  type: DirectoryOrCreate
  delegate_to: "{{ groups['k3s_master'][0] }}"
  run_once: true

- name: Create IPFS Services
  kubernetes.core.k8s:
    state: present
    definition: "{{ item }}"
  loop:
    - apiVersion: v1
      kind: Service
      metadata:
        name: ipfs-swarm
        namespace: storage
      spec:
        type: ClusterIP
        ports:
          - port: 4001
            targetPort: 4001
            name: swarm
        selector:
          app: ipfs
    - apiVersion: v1
      kind: Service
      metadata:
        name: ipfs-api
        namespace: storage
      spec:
        type: ClusterIP
        ports:
          - port: 5001
            targetPort: 5001
            name: api
        selector:
          app: ipfs
    - apiVersion: v1
      kind: Service
      metadata:
        name: ipfs-gateway
        namespace: storage
      spec:
        type: ClusterIP
        ports:
          - port: 8080
            targetPort: 8080
            name: gateway
        selector:
          app: ipfs
  delegate_to: "{{ groups['k3s_master'][0] }}"
  run_once: true

- name: Create IPFS Ingress
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: networking.k8s.io/v1
      kind: Ingress
      metadata:
        name: ipfs-gateway
        namespace: storage
        annotations:
          kubernetes.io/ingress.class: nginx
          cert-manager.io/cluster-issuer: letsencrypt-prod
          nginx.ingress.kubernetes.io/proxy-body-size: "1024m"
          nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
          nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
      spec:
        tls:
          - hosts:
              - ipfs.{{ domain_name }}
            secretName: ipfs-tls
        rules:
          - host: ipfs.{{ domain_name }}
            http:
              paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: ipfs-gateway
                      port:
                        number: 8080
  delegate_to: "{{ groups['k3s_master'][0] }}"
  run_once: true
